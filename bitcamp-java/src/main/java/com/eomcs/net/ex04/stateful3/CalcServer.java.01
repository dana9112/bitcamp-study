// stateful 방식의 이점 활용 - 계산기 서버 만들기
package com.eomcs.net.ex04.stateful3;

import java.io.DataInputStream;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;

public class CalcServer {
  public static void main(String[] args) throws Exception {
    System.out.println("서버 실행 중...");

    ServerSocket ss = new ServerSocket(8888);

    while (true) {
      Socket socket = ss.accept();
      socket.getRemoteSocketAddress();
      InetSocketAddress remoteAddr = (InetSocketAddress) socket.getRemoteSocketAddress();
      System.out.printf("클라이언트(%s)가 연결되었음!\n", //
          remoteAddr.getAddress(), remoteAddr.getPort());
      try {
        processRequest(socket);
      } catch (Exception e) {
        System.out.println("클라이언트 요청 처리 중 오류 발생!");
        System.out.println("클라이언트 연결 종료!");
      }
      // 연결된 클라이언트가 연결을 끊기 전까지는
      // 대기하고 있는 다른 클라이언트의 요청을 처리할 수 없다.
      // 이것이 스레드를 사용하기 전의 문제점이다.

    }
    // ss.close();
  }

  static void processRequest(Socket socket) throws Exception {
    try (Socket socket2 = socket;
        DataInputStream in = new DataInputStream(socket.getInputStream());
        PrintStream out = new PrintStream(socket.getOutputStream());) {


      // 계산 결과를 유지할 변수
      int result = 0;

      loop: while (true) {
        String op = in.readUTF();
        int a = in.readInt();

        switch (op) {
          case "+":
            result += a;
            break;
          case "-":
            result -= a;
            break;
          case "*":
            result *= a;
            break;
          case "/":
            result /= a;
            break;
          case "quit":
            break loop; // while문 앞에 라벨을 붙여 while을 완전히 빠져나갈 수 있도록 한 것
        }

        out.printf("계산 결과: %d\n", result);
      }
      out.println("quit");
    }
  }
}


